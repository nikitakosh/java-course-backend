/*
 * This file is generated by jOOQ.
 */

package edu.java.domain.jooq.tables.records;


import edu.java.domain.jooq.tables.Link;
import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.18.6"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class LinkRecord extends UpdatableRecordImpl<LinkRecord> implements Record8<Integer, String, OffsetDateTime, OffsetDateTime, String, String, Long, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Create a detached LinkRecord
     */
    public LinkRecord() {
        super(Link.LINK);
    }

    /**
     * Create a detached, initialised LinkRecord
     */
    @ConstructorProperties({"id", "url", "updatedAt", "createdAt", "commitMessage", "commitSha", "answerId", "answerOwner"})
    public LinkRecord(@Nullable Integer id, @NotNull String url, @Nullable OffsetDateTime updatedAt, @NotNull OffsetDateTime createdAt, @Nullable String commitMessage, @Nullable String commitSha, @Nullable Long answerId, @Nullable String answerOwner) {
        super(Link.LINK);

        setId(id);
        setUrl(url);
        setUpdatedAt(updatedAt);
        setCreatedAt(createdAt);
        setCommitMessage(commitMessage);
        setCommitSha(commitSha);
        setAnswerId(answerId);
        setAnswerOwner(answerOwner);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised LinkRecord
     */
    public LinkRecord(edu.java.domain.jooq.tables.pojos.Link value) {
        super(Link.LINK);

        if (value != null) {
            setId(value.getId());
            setUrl(value.getUrl());
            setUpdatedAt(value.getUpdatedAt());
            setCreatedAt(value.getCreatedAt());
            setCommitMessage(value.getCommitMessage());
            setCommitSha(value.getCommitSha());
            setAnswerId(value.getAnswerId());
            setAnswerOwner(value.getAnswerOwner());
            resetChangedOnNotNull();
        }
    }

    /**
     * Getter for <code>LINK.ID</code>.
     */
    @Nullable
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>LINK.ID</code>.
     */
    public void setId(@Nullable Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>LINK.URL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getUrl() {
        return (String) get(1);
    }

    /**
     * Setter for <code>LINK.URL</code>.
     */
    public void setUrl(@NotNull String value) {
        set(1, value);
    }

    /**
     * Getter for <code>LINK.UPDATED_AT</code>.
     */
    @Nullable
    public OffsetDateTime getUpdatedAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>LINK.UPDATED_AT</code>.
     */
    public void setUpdatedAt(@Nullable OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>LINK.CREATED_AT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>LINK.CREATED_AT</code>.
     */
    public void setCreatedAt(@NotNull OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>LINK.COMMIT_MESSAGE</code>.
     */
    @Size(max = 1000000000)
    @Nullable
    public String getCommitMessage() {
        return (String) get(4);
    }

    /**
     * Setter for <code>LINK.COMMIT_MESSAGE</code>.
     */
    public void setCommitMessage(@Nullable String value) {
        set(4, value);
    }

    /**
     * Getter for <code>LINK.COMMIT_SHA</code>.
     */
    @Size(max = 1000000000)
    @Nullable
    public String getCommitSha() {
        return (String) get(5);
    }

    /**
     * Setter for <code>LINK.COMMIT_SHA</code>.
     */
    public void setCommitSha(@Nullable String value) {
        set(5, value);
    }

    /**
     * Getter for <code>LINK.ANSWER_ID</code>.
     */
    @Nullable
    public Long getAnswerId() {
        return (Long) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * Setter for <code>LINK.ANSWER_ID</code>.
     */
    public void setAnswerId(@Nullable Long value) {
        set(6, value);
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    /**
     * Getter for <code>LINK.ANSWER_OWNER</code>.
     */
    @Size(max = 1000000000)
    @Nullable
    public String getAnswerOwner() {
        return (String) get(7);
    }

    /**
     * Setter for <code>LINK.ANSWER_OWNER</code>.
     */
    public void setAnswerOwner(@Nullable String value) {
        set(7, value);
    }

    @Override
    @NotNull
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    @Override
    @NotNull
    public Row8<Integer, String, OffsetDateTime, OffsetDateTime, String, String, Long, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row8<Integer, String, OffsetDateTime, OffsetDateTime, String, String, Long, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Integer> field1() {
        return Link.LINK.ID;
    }

    @Override
    @NotNull
    public Field<String> field2() {
        return Link.LINK.URL;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field3() {
        return Link.LINK.UPDATED_AT;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field4() {
        return Link.LINK.CREATED_AT;
    }

    @Override
    @NotNull
    public Field<String> field5() {
        return Link.LINK.COMMIT_MESSAGE;
    }

    @Override
    @NotNull
    public Field<String> field6() {
        return Link.LINK.COMMIT_SHA;
    }

    @Override
    @NotNull
    public Field<Long> field7() {
        return Link.LINK.ANSWER_ID;
    }

    @Override
    @NotNull
    public Field<String> field8() {
        return Link.LINK.ANSWER_OWNER;
    }

    @Override
    @Nullable
    public Integer component1() {
        return getId();
    }

    @Override
    @NotNull
    public String component2() {
        return getUrl();
    }

    @Override
    @Nullable
    public OffsetDateTime component3() {
        return getUpdatedAt();
    }

    @Override
    @NotNull
    public OffsetDateTime component4() {
        return getCreatedAt();
    }

    @Override
    @Nullable
    public String component5() {
        return getCommitMessage();
    }

    @Override
    @Nullable
    public String component6() {
        return getCommitSha();
    }

    @Override
    @Nullable
    public Long component7() {
        return getAnswerId();
    }

    @Override
    @Nullable
    public String component8() {
        return getAnswerOwner();
    }

    @Override
    @Nullable
    public Integer value1() {
        return getId();
    }

    @Override
    @NotNull
    public String value2() {
        return getUrl();
    }

    @Override
    @Nullable
    public OffsetDateTime value3() {
        return getUpdatedAt();
    }

    @Override
    @NotNull
    public OffsetDateTime value4() {
        return getCreatedAt();
    }

    @Override
    @Nullable
    public String value5() {
        return getCommitMessage();
    }

    @Override
    @Nullable
    public String value6() {
        return getCommitSha();
    }

    @Override
    @Nullable
    public Long value7() {
        return getAnswerId();
    }

    @Override
    @Nullable
    public String value8() {
        return getAnswerOwner();
    }

    @Override
    @NotNull
    public LinkRecord value1(@Nullable Integer value) {
        setId(value);
        return this;
    }

    @Override
    @NotNull
    public LinkRecord value2(@NotNull String value) {
        setUrl(value);
        return this;
    }

    @Override
    @NotNull
    public LinkRecord value3(@Nullable OffsetDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    @NotNull
    public LinkRecord value4(@NotNull OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    @NotNull
    public LinkRecord value5(@Nullable String value) {
        setCommitMessage(value);
        return this;
    }

    @Override
    @NotNull
    public LinkRecord value6(@Nullable String value) {
        setCommitSha(value);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public LinkRecord value7(@Nullable Long value) {
        setAnswerId(value);
        return this;
    }

    @Override
    @NotNull
    public LinkRecord value8(@Nullable String value) {
        setAnswerOwner(value);
        return this;
    }

    @Override
    @NotNull
    public LinkRecord values(@Nullable Integer value1, @NotNull String value2, @Nullable OffsetDateTime value3, @NotNull OffsetDateTime value4, @Nullable String value5, @Nullable String value6, @Nullable Long value7, @Nullable String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }
}

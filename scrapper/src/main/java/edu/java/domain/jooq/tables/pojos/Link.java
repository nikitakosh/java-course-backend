/*
 * This file is generated by jOOQ.
 */

package edu.java.domain.jooq.tables.pojos;


import jakarta.validation.constraints.Size;
import java.beans.ConstructorProperties;
import java.io.Serializable;
import java.time.OffsetDateTime;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "https://www.jooq.org",
                "jOOQ version:3.18.6"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Link implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private String url;
    private OffsetDateTime updatedAt;
    private OffsetDateTime createdAt;
    private String commitMessage;
    private String commitSha;
    private Long answerId;
    private String answerOwner;

    public Link() {
    }

    public Link(Link value) {
        this.id = value.id;
        this.url = value.url;
        this.updatedAt = value.updatedAt;
        this.createdAt = value.createdAt;
        this.commitMessage = value.commitMessage;
        this.commitSha = value.commitSha;
        this.answerId = value.answerId;
        this.answerOwner = value.answerOwner;
    }

    @ConstructorProperties({"id", "url", "updatedAt", "createdAt", "commitMessage", "commitSha", "answerId", "answerOwner"})
    public Link(
            @Nullable Integer id,
            @NotNull String url,
            @Nullable OffsetDateTime updatedAt,
            @NotNull OffsetDateTime createdAt,
            @Nullable String commitMessage,
            @Nullable String commitSha,
            @Nullable Long answerId,
            @Nullable String answerOwner
    ) {
        this.id = id;
        this.url = url;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.commitMessage = commitMessage;
        this.commitSha = commitSha;
        this.answerId = answerId;
        this.answerOwner = answerOwner;
    }

    /**
     * Getter for <code>LINK.ID</code>.
     */
    @Nullable
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>LINK.ID</code>.
     */
    public void setId(@Nullable Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>LINK.URL</code>.
     */
    @jakarta.validation.constraints.NotNull
    @Size(max = 1000000000)
    @NotNull
    public String getUrl() {
        return this.url;
    }

    /**
     * Setter for <code>LINK.URL</code>.
     */
    public void setUrl(@NotNull String url) {
        this.url = url;
    }

    /**
     * Getter for <code>LINK.UPDATED_AT</code>.
     */
    @Nullable
    public OffsetDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    /**
     * Setter for <code>LINK.UPDATED_AT</code>.
     */
    public void setUpdatedAt(@Nullable OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    /**
     * Getter for <code>LINK.CREATED_AT</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Setter for <code>LINK.CREATED_AT</code>.
     */
    public void setCreatedAt(@NotNull OffsetDateTime createdAt) {
        this.createdAt = createdAt;
    }

    /**
     * Getter for <code>LINK.COMMIT_MESSAGE</code>.
     */
    @Size(max = 1000000000)
    @Nullable
    public String getCommitMessage() {
        return this.commitMessage;
    }

    /**
     * Setter for <code>LINK.COMMIT_MESSAGE</code>.
     */
    public void setCommitMessage(@Nullable String commitMessage) {
        this.commitMessage = commitMessage;
    }

    /**
     * Getter for <code>LINK.COMMIT_SHA</code>.
     */
    @Size(max = 1000000000)
    @Nullable
    public String getCommitSha() {
        return this.commitSha;
    }

    /**
     * Setter for <code>LINK.COMMIT_SHA</code>.
     */
    public void setCommitSha(@Nullable String commitSha) {
        this.commitSha = commitSha;
    }

    /**
     * Getter for <code>LINK.ANSWER_ID</code>.
     */
    @Nullable
    public Long getAnswerId() {
        return this.answerId;
    }

    /**
     * Setter for <code>LINK.ANSWER_ID</code>.
     */
    public void setAnswerId(@Nullable Long answerId) {
        this.answerId = answerId;
    }

    /**
     * Getter for <code>LINK.ANSWER_OWNER</code>.
     */
    @Size(max = 1000000000)
    @Nullable
    public String getAnswerOwner() {
        return this.answerOwner;
    }

    /**
     * Setter for <code>LINK.ANSWER_OWNER</code>.
     */
    public void setAnswerOwner(@Nullable String answerOwner) {
        this.answerOwner = answerOwner;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Link other = (Link) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        } else if (!this.id.equals(other.id))
            return false;
        if (this.url == null) {
            if (other.url != null)
                return false;
        } else if (!this.url.equals(other.url))
            return false;
        if (this.updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        } else if (!this.updatedAt.equals(other.updatedAt))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        } else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.commitMessage == null) {
            if (other.commitMessage != null)
                return false;
        } else if (!this.commitMessage.equals(other.commitMessage))
            return false;
        if (this.commitSha == null) {
            if (other.commitSha != null)
                return false;
        } else if (!this.commitSha.equals(other.commitSha))
            return false;
        if (this.answerId == null) {
            if (other.answerId != null)
                return false;
        } else if (!this.answerId.equals(other.answerId))
            return false;
        if (this.answerOwner == null) {
            if (other.answerOwner != null)
                return false;
        } else if (!this.answerOwner.equals(other.answerOwner))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.url == null) ? 0 : this.url.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.commitMessage == null) ? 0 : this.commitMessage.hashCode());
        result = prime * result + ((this.commitSha == null) ? 0 : this.commitSha.hashCode());
        result = prime * result + ((this.answerId == null) ? 0 : this.answerId.hashCode());
        result = prime * result + ((this.answerOwner == null) ? 0 : this.answerOwner.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Link (");

        sb.append(id);
        sb.append(", ").append(url);
        sb.append(", ").append(updatedAt);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(commitMessage);
        sb.append(", ").append(commitSha);
        sb.append(", ").append(answerId);
        sb.append(", ").append(answerOwner);

        sb.append(")");
        return sb.toString();
    }
}
